package hu.kisspd.citydp.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import hu.kisspd.citydp.MySQLConn;
import hu.kisspd.citydp.Util;
import hu.kisspd.citydp.gui.component.JPrettyButton;
import hu.kisspd.citydp.gui.component.JPrettyPasswordField;
import hu.kisspd.citydp.gui.component.JPrettyTextField;

import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Locale;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.awt.Dimension;
import java.awt.Toolkit;

public class RegisterScreen {
    private JPanel mainPanel;
    private JPrettyTextField nameField;
    private JPrettyPasswordField passwordField;
    private JPrettyPasswordField passwordAgainField;
    private JPrettyButton loginBtn;

    public static void main(String[] args) {
        JFrame frame = new JFrame("Regisztráció");
        frame.setContentPane(new RegisterScreen().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        Util.centerFrame(frame);
        frame.pack();
        frame.setVisible(true);
    }

    private static CompoundBorder border(int borderSize, JComponent component) {
        return BorderFactory.createCompoundBorder(component.getBorder(),
                BorderFactory.createEmptyBorder(borderSize, borderSize, borderSize, borderSize));
    }

    private void createUIComponents() {
        int arcSize = 30;

        nameField = new JPrettyTextField();
        nameField.setBorder(border(4, nameField));
        nameField.setArcSize(arcSize);
        nameField.setFont($$$getFont$$$(null, -1, 18, nameField.getFont()));
        nameField.setPlaceholder("Név");

        passwordField = new JPrettyPasswordField();
        passwordField.setBorder(border(4, passwordField));
        passwordField.setArcSize(arcSize);
        passwordField.setPlaceholder("Jelszó");
        passwordField.setFont($$$getFont$$$(null, -1, 18, passwordField.getFont()));

        passwordAgainField = new JPrettyPasswordField();
        passwordAgainField.setBorder(border(4, passwordAgainField));
        passwordAgainField.setArcSize(arcSize);
        passwordAgainField.setPlaceholder("Jelszó újra");
        passwordAgainField.setFont($$$getFont$$$(null, -1, 18, passwordAgainField.getFont()));

        loginBtn = new JPrettyButton("Regisztráció");
        loginBtn.setBorder(border(4, loginBtn));
        loginBtn.setArcSize(arcSize);
        loginBtn.setFont($$$getFont$$$(null, -1, 18, loginBtn.getFont()));
        loginBtn.addActionListener(this::loginAction);
    }

    private void loginAction(ActionEvent evt) {
        String name = nameField.getText();
        String password = String.valueOf(passwordField.getPassword());
        String passwordVerify = String.valueOf(passwordAgainField.getPassword());

        if (name.contains(" ")) {
            Util.showWarning("A felhasználónév nem tartalmazhat szóközt!", "Hibás felhasználónév");
            return;
        } else if (name.isBlank() || password.isBlank() || passwordVerify.isBlank()) {
            Util.showWarning("Minden mező kitöltése kötelező!", "Hiányzó adat");
            return;
        } else if (!password.equals(passwordVerify)) {
            Util.showWarning("A két jelszó nem egyezik!", "Hibás jelszó");
            return;
        } else if (Login.userExists(name)) {
            Util.showWarning("A felhasználó már létezik!", "Létező felhasználó");
            return;
        }

        MySQLConn.connectDB();
        String query = String.format("INSERT INTO user (name, password) VALUES ('%s', '%s')", name, password);
        if (MySQLConn.runStatement(query)) {
            JOptionPane.showMessageDialog(null, "Sikeres regisztráció!");
        }
        MySQLConn.disconnectDB();

        EventQueue.invokeLater(() -> MainScreen.main(null));
        SwingUtilities.getWindowAncestor(mainPanel).dispose();
    }

    //<editor-fold desc="Generated Code">
    public RegisterScreen() {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(40, 40, 40, 40), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), 24, 24));
        Font panel1Font = this.$$$getFont$$$(null, -1, -1, panel1.getFont());
        if (panel1Font != null) panel1.setFont(panel1Font);
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(640, 240), null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 18, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Név");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, -1, 18, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Jelszó");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, -1, 18, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Jelszó ismétlése");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        panel1.add(nameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(passwordField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(passwordAgainField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(loginBtn, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label1.setLabelFor(nameField);
        label2.setLabelFor(passwordField);
        label3.setLabelFor(passwordAgainField);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    //</editor-fold>
}
